const mongoose = require('mongoose');

/**
 * @swagger
 * components:
 *   schemas:
 *     Report:
 *       type: object
 *       required:
 *         - companyId
 *         - startDate
 *         - endDate
 *         - reportType
 *       properties:
 *         companyId:
 *           type: string
 *           description: Reference to the company (ID of the Company model)
 *         startDate:
 *           type: string
 *           format: date
 *           description: The start date of the report period
 *         endDate:
 *           type: string
 *           format: date
 *           description: The end date of the report period
 *         reportType:
 *           type: string
 *           enum: [daily, weekly, monthly, yearly]
 *           description: The type of the report (daily, weekly, monthly, yearly)
 *         totalSales:
 *           type: number
 *           description: Total sales amount during the report period
 *         totalProductsSold:
 *           type: number
 *           description: Total quantity of products sold during the report period
 *         totalTransactions:
 *           type: number
 *           description: Total number of transactions during the report period
 *         topSellingProduct:
 *           type: object
 *           properties:
 *             productId:
 *               type: string
 *               description: Reference to the top selling product (ID of the Product model)
 *             name:
 *               type: string
 *               description: Name of the top selling product
 *             quantitySold:
 *               type: number
 *               description: Quantity of the top selling product sold
 *         revenuePerProduct:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               productId:
 *                 type: string
 *                 description: Reference to the product (ID of the Product model)
 *               name:
 *                 type: string
 *                 description: Name of the product
 *               revenue:
 *                 type: number
 *                 description: Revenue generated by the product during the report period
 *         topSellingUser:
 *           type: object
 *           properties:
 *             userId:
 *               type: string
 *               description: Reference to the top selling user (ID of the User model)
 *             username:
 *               type: string
 *               description: Username of the top selling user
 *             userTotalSales:
 *               type: number
 *               description: Total sales amount generated by the user during the report period
 *         finalStock:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               productId:
 *                 type: string
 *                 description: Reference to the product (ID of the Product model)
 *               name:
 *                 type: string
 *                 description: Name of the product
 *               remainingQuantity:
 *                 type: number
 *                 description: Remaining quantity of the product in stock at the end of the report period
 *         stockMovements:
 *           type: object
 *           properties:
 *             entries:
 *               type: number
 *               description: Total quantity of products entered into the stock during the report period
 *             exits:
 *               type: number
 *               description: Total quantity of products exited from the stock during the report period
 */
const reportSchema = new mongoose.Schema({
  companyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  reportType: { type: String, enum: ['daily', 'weekly', 'monthly', 'yearly'], required: true },
  totalSales: { type: Number, default: 0 },
  totalProductsSold: { type: Number, default: 0 },
  totalTransactions: { type: Number, default: 0 },
  topSellingProduct: {
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
    name: { type: String },
    quantitySold: { type: Number, default: 0 }
  },
  revenuePerProduct: [
    {
      productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
      name: { type: String },
      revenue: { type: Number, default: 0 }
    }
  ],
  topSellingUser: {
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    username: { type: String },
    userTotalSales: { type: Number, default: 0 }
  },
  finalStock: [
    {
      productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
      name: { type: String },
      remainingQuantity: { type: Number, default: 0 }
    }
  ],
  stockMovements: {
    entries: { type: Number, default: 0 },
    exits: { type: Number, default: 0 }
  }
}, { timestamps: true, versionKey: false });

module.exports = mongoose.model('Report', reportSchema);
