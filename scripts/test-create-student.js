const axios = require('axios');

// Configuration
const BASE_URL = 'http://24.199.107.106:8000/api/v1';

// Donn√©es de test pour la connexion
const testCredentials = {
  phone: '+243856016607',
  password: '1234'
};

let authToken = '';
let companyId = '';
let classroomId = '';

// Fonction pour se connecter
async function login() {
  try {
    console.log('üîê Connexion...');
    const response = await axios.post(`${BASE_URL}/login`, testCredentials);
    
    if (response.data.token) {
      authToken = response.data.token;
      companyId = response.data.data.companyId._id;
      console.log('‚úÖ Connexion r√©ussie');
      console.log('üë§ Utilisateur:', response.data.data.username);
      console.log('üè¢ Company ID:', companyId);
      return true;
    } else {
      console.log('‚ùå √âchec de la connexion:', response.data);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    return false;
  }
}

// R√©cup√©rer les classes disponibles
async function getClassrooms() {
  try {
    console.log('\nüìö R√©cup√©ration des classes...');
    const response = await axios.get(`${BASE_URL}/classrooms`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Classes r√©cup√©r√©es:', response.data.classrooms.length);
    
    if (response.data.classrooms.length > 0) {
      console.log('\nüìã Classes disponibles:');
      response.data.classrooms.forEach((classroom, index) => {
        console.log(`${index + 1}. ${classroom.name} (ID: ${classroom._id})`);
        console.log(`   Ann√©e: ${classroom.schoolYear}`);
        console.log(`   Niveau: ${classroom.level || 'Non sp√©cifi√©'}`);
      });
      
      // Prendre la premi√®re classe pour le test
      classroomId = response.data.classrooms[0]._id;
      console.log(`\nüéØ Classe s√©lectionn√©e pour le test: ${response.data.classrooms[0].name}`);
    }
    
    return response.data.classrooms;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des classes:', error.response?.data || error.message);
    return [];
  }
}

// Cr√©er un √©l√®ve
async function createStudent() {
  if (!classroomId) {
    console.log('‚ùå Aucune classe disponible pour cr√©er un √©l√®ve');
    return false;
  }

  try {
    console.log('\nüë®‚Äçüéì Cr√©ation d\'un nouvel √©l√®ve...');
    
    const studentData = {
      lastName: 'KABILA',
      firstName: 'Junior',
      middleName: 'Joseph',
      gender: 'M',
      birthDate: '2010-05-15',
      parent: {
        name: 'Papa KABILA',
        phone: '+243123456789',
        email: 'papa.kabila@example.com'
      },
      classroomId: classroomId,
      schoolYear: '2025-2026'
    };
    
    console.log('üìù Donn√©es de l\'√©l√®ve:');
    console.log(JSON.stringify(studentData, null, 2));
    
    const response = await axios.post(`${BASE_URL}/students`, studentData, {
      headers: { 
        Authorization: `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ √âl√®ve cr√©√© avec succ√®s!');
    console.log('üìã R√©ponse:', JSON.stringify(response.data, null, 2));
    
    return response.data.student;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'√©l√®ve:');
    console.error('Status:', error.response?.status);
    console.error('Message:', error.response?.data?.message || error.message);
    console.error('D√©tails:', error.response?.data);
    return false;
  }
}

// Cr√©er un √©l√®ve avec matricule personnalis√©
async function createStudentWithCustomMatricule() {
  if (!classroomId) {
    console.log('‚ùå Aucune classe disponible pour cr√©er un √©l√®ve');
    return false;
  }

  try {
    console.log('\nüë©‚Äçüéì Cr√©ation d\'un √©l√®ve avec matricule personnalis√©...');
    
    const studentData = {
      matricule: 'ELV-123456',
      lastName: 'MULAMBA',
      firstName: 'Sarah',
      gender: 'F',
      birthDate: '2009-08-20',
      parent: {
        name: 'Maman MULAMBA',
        phone: '+243987654321'
      },
      classroomId: classroomId
      // schoolYear sera d√©duit de la classe
    };
    
    console.log('üìù Donn√©es de l\'√©l√®ve:');
    console.log(JSON.stringify(studentData, null, 2));
    
    const response = await axios.post(`${BASE_URL}/students`, studentData, {
      headers: { 
        Authorization: `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ √âl√®ve cr√©√© avec succ√®s!');
    console.log('üìã R√©ponse:', JSON.stringify(response.data, null, 2));
    
    return response.data.student;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'√©l√®ve:');
    console.error('Status:', error.response?.status);
    console.error('Message:', error.response?.data?.message || error.message);
    console.error('D√©tails:', error.response?.data);
    return false;
  }
}

// Lister tous les √©l√®ves
async function getAllStudents() {
  try {
    console.log('\nüìã Liste de tous les √©l√®ves...');
    const response = await axios.get(`${BASE_URL}/students`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ √âl√®ves r√©cup√©r√©s:', response.data.pagination.total);
    
    if (response.data.students.length > 0) {
      console.log('\nüë• Liste des √©l√®ves:');
      response.data.students.forEach((student, index) => {
        console.log(`${index + 1}. ${student.lastName} ${student.firstName} (${student.matricule})`);
        console.log(`   Classe: ${student.classroomId?.name || 'N/A'}`);
        console.log(`   Genre: ${student.gender}`);
        console.log(`   Statut: ${student.status}`);
      });
    }
    
    return response.data.students;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des √©l√®ves:', error.response?.data || error.message);
    return [];
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Test de cr√©ation d\'√©l√®ve');
  console.log('============================');
  
  // 1. Connexion
  const loginSuccess = await login();
  if (!loginSuccess) {
    console.log('‚ùå Impossible de continuer sans connexion');
    return;
  }
  
  // 2. R√©cup√©rer les classes
  await getClassrooms();
  
  // 3. Cr√©er un √©l√®ve (matricule auto-g√©n√©r√©)
  await createStudent();
  
  // 4. Cr√©er un √©l√®ve avec matricule personnalis√©
  await createStudentWithCustomMatricule();
  
  // 5. Lister tous les √©l√®ves
  await getAllStudents();
  
  console.log('\nüéâ Tests termin√©s!');
}

// Ex√©cution
main().catch(console.error);
